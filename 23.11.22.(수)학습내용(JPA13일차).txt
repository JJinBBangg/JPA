1.학습 내용



성능에 관여할 수 있는 요소 정리(JPA 쿼리 튜닝)
1. 테이블 생성 전략 - 조인, 단일테이블, 구현클레스마다구현
2. 기본값 : @XXXToOne(fetch = FetchType.EAGER), @XXXToMany(fetch = FetchType.LAZY) 
   -LAZY(지연로딩) , EAGER(즉시로딩) : LAZY사용을 권장하며 
3. 양방향 연관관계 설정(로직의 연관성을 분석하여 관계의 주인설정) - 착안사항 연관관계의 설정이 잘못되어 불필요한 쿼리가 실행되는경우 성능저하
4. 2번과 관련되어있으나 jpql사용할 때 1차캐시에 없는데이터 사용하는경우 사용할 때마다 가져오는 것이 성능에 관련 있을 수 있으니
    필요한 경우 JPQL의 join fetch 기능을 사용하여 한번에 영속성 컨텍스트에 값을 저장하고 사용(EAGER사용은 지양), 엔티티 그래프 기능 사용

5. XXToOne 관계에서 문제점 해결  => fetch join사용하여 쿼리를 1번으로 단축한다
     XXToMany 관계에서 문제점 해결 => 
	페이징이 필요없고 1:N 관계 테이블이 1개만 있을 경우 : fetch join 사용
	페이징이 필요할 경우 : FetchType을 Lazy로 설정하고 
				글로벌 설정 : hibernate.default_batch_fetch_size 설정 
				개별 설정 : @BatchSize(@XXToMany는 컬럼, 이외에는 Entity class에 설정)
유의할 점 상황에 따라 사용해야하는데 data양이 적은경우 fetch join을 사용하나 많은경우 fetch size설정
위 처럼 하였으나 Entity를 가져오는 것에서 불필요한 데이터로인해  성능문제가 있는 경우에는 
JPQL에서 바로 DTO로 받아서 사용 

api 개발 시 발생하는 문제점 실습
1. 조회용 샘플 데이터 입력
2. 지연로딩과 조회성능 최적화
3. 컬렉션 조회 최적화
4. 페이징과 한계 돌파
5. OSIV와 성능 최적화 