1. 학습내용

<Querydsl>


public Page<MemberResponse> findMembers(Pageable pageable) {
QueryResults<MemberResponse> result = query
        .select(new QMemberResponse(member.username, member.age))
        .from(member)
        .offset(pageable.getOffset())
        .limit(pageable.getPageSize())
        .orderBy(member.id.desc())
        .fetchResults();
List<MemberResponse> members = result.getResults();
long total = result.getTotal();

return new PageImpl<>(members, pageable, total);
}

public Page<MemberTeamResponse> findMemberWithTeam(MemberSearchCondition condition, Pageable pageable) {
QueryResults<MemberTeamResponse> getResult = query
        .select(new QMemberTeamResponse(
                member.id.as("memberId"),
                member.username,
                member.age,
                team.id.as("teamId"),
                team.name.as("teamName")))
        .from(member)
        .leftJoin(member.team, team)
        .where(search(condition))
        .offset(pageable.getOffset())
        .limit(pageable.getPageSize())
        .orderBy(member.id.desc())  
        .fetchResults();

List<MemberTeamResponse> contents = getResult.getResults();
long totalCount = getResult.getTotal();

return new PageImpl<>(contents, pageable, totalCount);
}

// CountQuery 분리
public Page<MemberTeamResponse> findMemberWithTeamV2(MemberSearchCondition condition, Pageable pageable) {
List<MemberTeamResponse> contents = query
        .select(new QMemberTeamResponse(
                member.id.as("memberId"),
                member.username,
                member.age,
                team.id.as("teamId"),
                team.name.as("teamName")))
        .from(member)
        .leftJoin(member.team, team)
        .where(search(condition))
        .offset(pageable.getOffset())
        .limit(pageable.getPageSize())
        .orderBy(/*member.id.desc()*/)
        .fetch();

Long totalCount = query
        .select(member)
        .from(member)
        .join(member.team, team)
        .where(search(condition))
        .fetchCount();
JPAQuery<Member> memberJPAQuery = query
        .select(member)
        .from(member)
        .join(member.team, team)
        .where(search(condition));


// page 최적화
// 검색 결과가 pagesize보다 적을 때 카운트 쿼리를 보내지 않음
return PageableExecutionUtils.getPage(contents,pageable, memberJPAQuery::fetchCount);
}

// 내부 메서드
private Predicate search(MemberSearchCondition condition) {
BooleanBuilder builder = new BooleanBuilder();
if (hasText(condition.getUsername())) builder.and(userNameEq(condition.getUsername()));
if (hasText(condition.getTeamName())) builder.and(teamNameEq(condition.getTeamName()));
if (condition.getAgeGoe() != null) builder.and(ageGoe(condition.getAgeGoe()));
if (condition.getAgeLoe() != null) builder.and(ageLoe(condition.getAgeLoe()));
if (hasText(condition.getUsernameLike())) builder.and(usernameLike(condition.getUsernameLike()));
return builder;
}

private BooleanExpression userNameEq(String condition) {
if (hasText(condition)) return member.username.eq(condition);
return null;
}

private BooleanExpression teamNameEq(String condition) {
if (hasText(condition)) return team.name.eq(condition);
return null;
}

private BooleanExpression ageGoe(Integer condition) {
if (condition != null) return member.age.goe(condition);
return null;
}

private BooleanExpression ageLoe(Integer condition) {
if (condition != null) return member.age.loe(condition);
return null;
}

private BooleanExpression usernameLike(String condition) {
if (hasText(condition)) return member.username.like("%" + condition + "%");
return null;
}