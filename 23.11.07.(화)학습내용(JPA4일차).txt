1. 학습내용
  - 양방향 연관관계 
public class Member {
    @Id @GeneratedValue
    @Column(name = "MEMBER_NAME")
    private Long id;

    @Column(name = "USERNAME")
    private String username;

    @ManyToOne
    @JoinColumn(name ="TEAM_ID")
    private Team team;
}

public class Team {
    @Id @GeneratedValue
    @Column(name = "TEAM_ID")
    private Long id;
    private String name;

    @OneToMany(mappedBy = "team")
    private List<Member> members = new ArrayList<>();
}
위처럼 member가 기준 테이블이 되는경우 

Team team = new Team();
team.setName("TeamA");
em.persist(team);

Member member = new Member();
member.setTeam(team);
member.setUsername("memberA");
em.persist(member);

team.getMembers().add(member);

member.setTeam 하지 않고 실행 시 member 테이블의 TEAM_ID 값 null(flush하더라도 null임)
읽기전용이라 member.setTeam()을 한 값만 들어가지 여기서는 입력되지않음

flush를 하지 않는 상태에서 로직 상 값을 이용하려면 1차 캐시에 저장된 값을 이용해야하는데
이런경우 team.getMembers().add(member), member.setTeam(team) 양쪽에서 입력한 후에 사용해야함
이유는 1차캐시에 올라가는 모습은 순수한 java객체로 team의 List<Member> 값이 없음

flush나 commit이후에 로직이 들어가는경우 상관없지만 1차캐시에서 바로 값을 꺼내와서 로직을 구연하는경우
양쪽에 모두 입력해줘야하므로 기본적으로 양쪽에 값을 입력하는것을 기본으로 하면됨

해결책으로 연관관계 편의메소드
Member Entity 객체  setter에     
public void setTeam(Team team) {
        this.team = team;
        team.getMembers().add(this);
}
입력하여 team값이 세팅될때 객체값을 자동으로 입력되도록 셋팅

setter인경우 다른 기능들의 간섭이 있을 수 있으므로
public void changeTeam(Team team) {
        this.team = team;
	//로직(존재하는값 구분 등)
        team.getMembers().add(this);
} 
으로 수정하여 setter이외의 기능으로 별도로 만들어준다
기존에 team객체 안에 this객체와 같은 ref 값이 존재할 때 저장하지않는 등 로직이 필요하면 추가

JPA 상속관계 맵핑
  - 조인 전략 : 상위 클레스 타입 테이블과 하위 타입테이블을 각각 분리하고 각 테이블을 정규화 형식에 맞게 PK로 조인하는전략
   - 장점 : 테이블 정규화 , 외래키 참조 무결성 제약조건 활용가능, 저장공간 효율화
     - 단점  : 조회시 조인을 많이 사용함(성능저하), 조회 쿼리가 복잡함, 데이터저장 시 상위, 하위 두개의 테이블에 insert문이 발생함
 
 - 단일 테이블전략 : 모든 컬럼을 한태이블에 넣고 DTYPE으로 구분
   - 장점 : 조인이 필요없음, 쿼리가 단순함, 조회 성능이 높음 
     - 단점 : 하위 엔티티 클래스가 매핑한 컬럼은  모두 null 값을 허용(무결성의 방향과는 맞지않음), 여러 테이블 정보를 모아놓은것이기 때문에 테이블 크기가 너무 커질 수도 있음

 - 구현 클래스마다 구현 전략 : 공통되는 값들도 모두 각 테이블에 작성하여 구현 클래스 갯수만큼 테이블생성
     - 장점 : 
     - 단점 : 통계내거나 테이블 통합 쿼리 어려움(굉장히 복잡해짐), 상위클래스로 검색 시 모든 테이블로 union 쿼리를 만들어서 검색 하기때문에 느림
@inheritance(strategy = inheritanceType.XXX) 
JOINED : 조인전략
SINGLE_TABLE : 단일 테이블 전략
TABLE_PER_CLASS : 구현 클래스마다 테이블 전략

@discriminatorColumn(name = "DTYPE")  DTYPE 컬럼 이름 설정
@discriminatorValue("XXX") 하위 FK 매칭되는 테이블 별칭

상속받고싶은 클래스에 작성하여 사용
@Entity // 매핑정보와 상속받은 타입으로 조회 검색 기능도 제공
@MappedSuperClass 
 - 상속 관계 맵핑 X
 - 엔티티X, 테이블과 매핑 X
  - 상속 받더라도 매핑 정보만 제공
  - 조회 검색 불가 em.find(BaseEntity.class, member)
 - 직접 생성해서 사용할 일은 없으므로 추상클래스 권장

