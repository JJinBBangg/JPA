1. 학습내용
     // XXXToOne 문제해결
    // Order -> Member;
    // Order -> Delivery
    @GetMapping("/orders")
    public List<OrderResponse> getOrders(){
        log.info(">>>>>>>>>GET : /orders");
       return orderService.findAll();
    }

    @GetMapping("/orders/{id}")
    public List<OrderResponse> getOrder(@PathVariable Long id, String name){
        return orderService.findOrderByName(name);
    }

    @PostMapping("/orders")
    public void add(CreateOrder createOrder){
        orderService.join(createOrder);
    }

    @AllArgsConstructor
    @Data
    private class Result<T> {
        private T data;
    }

// 적절하지 않은 코드
// 아래처럼 작성 시 build 할 때 접근한 각 객체의 모든 데이터를 로딩하는 쿼리문이 발생함
//        List<OrderResponse> orderResponses = orderRepository.findAll()
//                .stream()
//                .map(order ->
//                        OrderResponse.builder()
//                        .id(order.getId())
//                        .status(order.getStatus())
//                        .orderDate(order.getOrderDate())
//                        .itemResponse(getItemResponse(order.getOrderItems()))
//                        .deliveryResponse(getDelivery(order))
//                        .build())
//                .collect(Collectors.toList());
// 수정된 코드
// 추가된 로직이 필요할 시 필요한 객체를 찾고 사용하는 방식으로 작성해야 쿼리가 덜나감
// 위 하고의 차이는 order.getOrderItems.stream() 형태로 사용하게 될 때
// orderItem 객체와 join 되어있는 item 을 각각의 join 쿼리를 만들게됨
// 예 select * from order_item where orderId = ?;
//    select * from order_item oi join item i on oi.id = i.id;

// 아래처럼 Order 응답 객체는 Order 조회만 하는 쿼리 1개로 해결하고
// 추가할 정보가 있을 시 해당되는 각각의 정보를 취합하는 방식으로 사용하는 것이 쿼리가 많이 나가지않음
// 로직 중 item 이미 가져온 경우 해당되는 item id 로 가져오면 영속성 컨텍스트에 등록 되어있을 시
// 추가 쿼리 없이 가져올 수 있음

// orderItem 인 경우 Order 와 1:N이기 때문에 필요하면 추가하거나(fetch join 을 사용하여 가져오고)
// Item, Member, Delivery 같은 경우 N:1 조회인 경우 Order 또는 OrderItem 의 참조 값을
// 기준으로 검색쿼리를 각각의 Repository 에서 가져와 사용하는것이 올바름
// (영속성 컨텍스트를 우선 검색하고 없으면 조회하되 불필요한 join 쿼리 만들지 않게 하는 것)
// 복잡한 join 필요할 시 queryDsl 사용해서 단건의 쿼리를 작성하도록 만드는 것이 올바름

//수정된 코드
    @Transactional(readOnly = true)
    public List<OrderResponse> findAll(){
        return orderRepository.findAll()
                .stream()
                .map(order -> OrderResponse.builder()
                        .id(order.getId())
                        .member(order.getMember())// 사용하면 쿼리 날라가고 안하면 안날라감 LAZY
                        .orderDate(order.getOrderDate())
                        .orderItems(order.getOrderItems()) // 사용하면 쿼리 날라가고 안하면 안날라감 LAZY
                        .delivery(order.getDelivery()) // 사용하면 쿼리 날라가고 안하면 안날라감 LAZY // 왜 2번 쿼리가 실행되는지 모르겠음.
                        .status(order.getStatus())
                        .build())
                .collect(Collectors.toList());
    }

OneToOne 관계에서 fetchType을 LAZY로 설정하더라도 n+1문제가 발생할 수 있음
해결방안 추가로 학습필요
성능에 관여할 수 있는 요소 정리(JPA 쿼리 튜닝)
1. 테이블 생성 전략 - 조인, 단일테이블, 구현클레스마다구현
2. 기본값 : @XXXToOne(fetch = FetchType.EAGER), @XXXToMany(fetch = FetchType.LAZY) 
   -LAZY(지연로딩) , EAGER(즉시로딩) : LAZY사용을 권장하며 
3. 양방향 연관관계 설정(로직의 연관성을 분석하여 관계의 주인설정) - 착안사항 연관관계의 설정이 잘못되어 불필요한 쿼리가 실행되는경우 성능저하
4. 2번과 관련되어있으나 jpql사용할 때 1차캐시에 없는데이터 사용하는경우 사용할 때마다 가져오는 것이 성능에 관련 있을 수 있으니
    필요한 경우 JPQL의 join fetch기능을 사용하여 한번에 영속성 컨텍스트에 값을 저장하고 사용(EAGER사용은 지양), 엔티티 그래프 기능 사용

api 개발 시 발생하는 문제점 실습
1. 조회용 샘플 데이터 입력
2. 지연로딩과 조회성능 최적화
3. 컬렉션 조회 최적화
4. 페이징과 한계 돌파
5. OSIV와 성능 최적화 