1.학습내용


SPRING DATA JPA 

 1) N+1 문제 해결 
   발생원인
   FetchType.LAZY 를 기본으로 전체 설정하는 것을 기본으로 하고 
     사용하지 않는 연결된 테이블의 값에는 HibernateProxy 객체가 
   들어가게되고 사용할 때 해당 테이블을 불러오는 + N 의 쿼리가 발생
   fetch join을 사용하게 되면 1개 쿼리에 join으로 테이블을 같이 불러오기때문에
   HibernateProxy 객체가 아닌 실제 Entity객체로 반환해줌

  1. fetch join
    @Query("select m from Member m " +
            "join fetch m.team t")
    List<Member> findMemberFetchJoinAll();

   fetch join의 경우 XXToOne 관계에서는 여러 테이블이  FK로 연결되어있더라도 상관없음 (결과값의 갯수가 동일하기때문)
   하지만 XXToMany 관계에서는 1개 테이블만 사용하고 여러 ToMany 관계에서는 사용하면 데이터의 정합성을 보장받을 수 없음

  2. Entity Graph

   <@Query와 혼합하여 사용하고 싶은 경우>   
    @Query("select m from Member m ")
    @EntityGraph(attributePaths = "team")
    List<Member> findMemberFetchJoinAll();

   <1개 테이블만 fetch join 하고싶은 경우>
    @Override
    @EntityGraph(attributePaths = "team")

   <여러 테이블을 fetch join 하고싶은 경우>
    @Override
    @EntityGraph(attributePaths = {"team", "orders", "address"})
    List<Member> findAll();
    List<Member> findAll();

   <쿼리메소드와 같이 사용하는 경우>
    @EntityGraph(attributePaths = "team")
    List<Member> findFetchJoinByName(@Param("name") String name);

   * 실무에서는 간단한 경우 EntityGraph를 사용하지만 쿼리가 복잡해지면 JPQL에서 fetch  join을 사용함

 2) JPA HINT
   findMember 를 가지고오는 순간부터 변경이 되었을 시 변경감지 하기 위한 기준객체를 미리 만들어놓음
   
    Member findMember = memberRepository.findById(member.getId()).orElseThrow(NotFoundMember::new);
    UpdateMember updateMember = UpdateMember.builder().name("memberA").build();
    findMember.updateMember(updateMember);
    em.flush();  // 변경감지(Dirty Checking)

    @QueryHints(@QueryHint(name ="org.hibernate.readOnly", value ="true"))
    Member findQueryHintById(@Param("id") Long id);

   위처럼 ReadOnly옵션을 사용하면 값을 변경하더라도 변경감지 자체를 하지않음

   * 실무 팁
    @QueryHint의 readOnly는 스냅샷을 만들지 않기 때문에, 메모리가 절약됨
      그리고 @Transaction(readOnly=true)는 트랜잭션 커밋 시점에 flush를 하지 않기 때문에 이로 인한 dirty checking 비용이 들지 않음 따라서 cpu가 절약됨
      따라서 읽기 전용 데이터는 이 두가지를 조합하면 최적의 성능 최적화를 얻을 수 있음(스프링 5.1 버전 이후 @Transaction(readOnly=true)로 설정하시면, @QueryHint의 readOnly까지 모두 동작)

   Lock 기능 사용
    @Lock(LockModeType.PESSIMISTIC_WRITE)  // 옵션 선택
    @Modifying(clearAutomatically = true)
    @Query("update Member m set m.age = m.age+1 where m.age >= :age")
    void updateMember(@Param("age") int age);

 3) Custom Repository 만들기
   1. interface Repository 생성
    public interface MemberRepositoryCustom {
        List<Member> findMemberCustom(); // 구현하고싶은 메소드 생성
    }

  2. 구현 class Repository 생성
    @RequiredArgsConstructor
    public class MemberRepositoryImpl implements MemberRepositoryCustom{
        private final EntityManager em;
        @Override
        public List<Member> findMemberCustom() {
            return em.createQuery("select m from Member m", Member.class).getResultList();
        }
    }

  3. interface Repository 기존 사용중이던 Repository에 jpaRepository<T, Id>, MemberRepositoryCustom 상속
       public interface MemberRepository extends JpaRepository<Member, Long>, MemberRepositoryCustom {
    }

   위 기능은 spring data jpa가 위처럼 구동가능하도록 만들어주는것이지 java에서는 위 기능 사용할 수 없음
   주의사항 
     기존 jpaRepository 상속받은 interface 이름 MemberRepository 
     구현클래스 이름을
   MemberRepository + Impl <= 방식으로 작성해야 spring data jpa에서 기능구현 해줌    

  * 팁 
     - 위처럼 custom기능의 경우 db에 직접 접근하거나 쿼리가 복잡해지는 경우,
       화면 구현에 집중하여 DTO등 으로 반환하여 쿼리를 생성해야하는경우 
       dir 분리하여 @Repository 별도로 생성하여 JPQL로 구현하는 것을 추천(Entity의  생명주기 활용 등과 별도의 쿼리인경우)
     - 커멘드성 쿼리, 핵심비지니스 로직을 분리하는 개념 


<< 실무 팁>>
정적쿼리인 경우
간단한 조건검색에서 쿼리 메소드를  사용하고 
2~3가지 이상 복잡한 조건을 검색해야하는경우 @Query("JPQL") 사용하는 것이 올바름

페이징 하는 쿼리가 복잡해지는 경우 성능향상을 위해 countQuery를 별도로 작성해줄 수 있음
left(right) outter join 인 경우 기준이 되는 left 테이블의 값을 기준으로 쿼리문 작성

동적 쿼리는 queryDSL사용하는 것이 올바름








